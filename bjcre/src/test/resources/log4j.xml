<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
    <!-- ========================== 自定义输出格式说明================================ -->
	<!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
	<!-- #%r 输出自应用启动到输出该log信息耗费的毫秒数 -->
	<!-- #%c 输出所属的类目，通常就是所在类的全名 -->
	<!-- #%t 输出产生该日志事件的线程名 -->
	<!-- #%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”  -->  
	<!-- #%m 输出代码指定信息，如info(“message”),输出message -->  
    <!-- #%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->  
    <!-- #%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)  -->  
    <!-- ========================================================================== -->  
      
    <!-- ========================== 输出方式说明================================ -->  
    <!-- Log4j提供的appender有以下几种:  -->  
    <!-- org.apache.log4j.ConsoleAppender(控制台),  -->  
    <!-- org.apache.log4j.FileAppender(文件),  -->  
    <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->  
    <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->  
    <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->  	
    
    <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{HH:mm:ss.SSS} %-5p [%t] %C.%M(%L) | %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMax" value="ERROR" />
			<param name="LevelMin" value="TRACE" />
		</filter>
	</appender>
    <appender name="R2" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{HH:mm:ss.SSS} %-5p [%t] %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMax" value="ERROR" />
			<param name="LevelMin" value="TRACE" />
		</filter>
    </appender>
    <appender name="errorLog" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="log/error.log" />
        <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
        <param name="Threshold" value="error" />
        <param name="Append" value="true" />
        <param name="DatePattern" value="'.'yyyy-MM-dd" />
        <param name="Encoding" value="UTF-8" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%t] %C.%M(%L) | %m%n" />
        </layout>
    </appender>

    <appender name="scribe" class="com.wanda.log.WandaLog">
        <param name="encoding" value="utf-8"/>
        <param name="localHostName" value="settle_web"/>
        <param name="serviceName" value="settle_web"/>
        <param name="logLevel" value="2"/>
        <param name="enable" value="true"/>
        <param name="scribeHost" value="127.0.0.1"/>
        <param name="scribePort" value="1464"/>
        <layout class="org.apache.log4j.PatternLayout">
        </layout>
    </appender>

	<!--通过<logger></logger>的定义可以将各个包中的类日志输出到不同的日志文件中 -->
	<logger name="com.mchange.v2.c3p0.impl" additivity="false">
		<level value="INFO" />
		<appender-ref ref="CONSOLE" />
	</logger>

    <logger name="com.wanda.settle.platform.server.common.IntegrationAOP" additivity="false">  
		<level value="INFO" />
        <appender-ref ref="R2" />  
        <appender-ref ref="errorLog" />  
        <appender-ref ref="errorLog" />  
    </logger>  

	<!--通过<category></category>的定义可以将各个包中的类日志输出到不同的日志文件中 -->
	<category name="com.mchange.v2.resourcepool">
		<level value="INFO" />
		<appender-ref ref="CONSOLE" />
	</category>  
  
    <root>
        <level class="org.apache.log4j.Level" value="debug" />
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="errorLog" />  
        <appender-ref ref="errorLog" />  
    </root>
</log4j:configuration>
